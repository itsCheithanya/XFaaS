//import { useState,useEffect,useMemo } from "react";
import {useMode} from "./theme"
import {ThemeProvider} from "@mui/material"
//import Topbar from "./scenes/global/Topbar";
import Bar from "./scenes/bar/index";
import Invocation from "./scenes/invocations/Invocation";
//import UserGraphs from "./scenes/graphs/Usergraphs";
//import GraphComponent from "./scenes/graphs/Refgraph";
//import GraphVisualization from "./scenes/graphs/Refgraph";
//import testData from "./components/data/testData";
import "./InvocationsPage.css"
import  Graph  from 'react-graph-vis';
import ResponsiveAppBar from './components/App-bar';
import { useNavigate } from 'react-router-dom';
import React, { useEffect, useState } from 'react';
import Button from '@mui/material/Button';
import GraphTable from './components/GraphTable';
import axios from "axios";
import { useLocation } from "react-router-dom";



var data = {
  Nodes: [
    {
      NodeId: "fm9m",
      NodeName: "Resize",
      Path: "examples/image-processing-diamond-multicloud-aws-to-az/src/Resize",
      EntryPoint: "func.py",
      MemoryInMB: 512,
      IsFused: true,
      IsAutoGenerated: false,
    },
    {
      NodeId: "b74b",
      NodeName: "Mobilenet",
      Path: "examples/image-processing-diamond-multicloud-aws-to-az/src/Mobilenet",
      EntryPoint: "func.py",
      MemoryInMB: 512,
      IsFused: true,
      IsAutoGenerated: false,
    },
    // Other nodes
  ],
  Edges: [
    {
      fm9m: ["b74b"],
    },
    // Other edges
  ],
  wf_partitions: [
    {
      partition_label: "label for datacentre",
      func_ids: ["fm9m", "b74b"],
    },
  ],
  wf_fusion_config: [
    {
      fused_func_id: "fm9m_b74b",
      original_func_ids: ["fm9m", "b74b"],
    },
  ],
};


const GraphWrapper = () => {
  const navigate = useNavigate();

  const HandleNodeClick = (event) => {
    const nodeId = event.nodes[0];
    if (nodeId) {
      navigate('/wf/CodeViewer');
    }
  };

  const options = {
    layout: {
        hierarchical: {
          enabled:true,
          direction:'LR',
        },
        improvedLayout:true,
      },
      edges: {
        arrows: 'to',
      },
      height: '400px',
      interaction: {
        zoomView: false, 
        hover: true, 
        hoverConnectedEdges: false,
        selectConnectedEdges: true,
     
      },
      nodes: {
  
      fixed:{
        x:true,
        y:true
      },
      opacity: 1,
  
      shape:"square",
  
      font: {
        "size": 18,
        "face": "ariel",
        
      },
  
  
    },
  
    
    
  };

  const graph = {
    nodes: [
        { id: 101, label: "101",},
        { id: 102, label: "102",  },
        { id: 103, label: "103", },
        { id: 104, label: "104",  },
        { id: 105, label: "105",  }
      ],
      edges: [
        { from: 101, to: 102 },
        { from: 101, to: 103 },
        { from: 102, to: 104 },
        { from: 102, to: 105 }
      ]
  };

 

  return (
    <div className="graphcontainer">
      <div className="graphbox">
        <Graph graph={graph} options={options} events={{ click: HandleNodeClick }} style={{ height: "640px" }} />
      </div>
    </div>
  );
};






function InvocationsPage() {
  const location=useLocation();
  const [depdetails,setDepdetails]=useState({})
  useEffect(()=>{
    const params=new URLSearchParams(location.search);
    const depid=params.get("wf_deployment_id");
    axios.post("/api/workflowId/deployments/deploymentId/",{"wf_deploymnet_id":depid}).then(res=>{
      const depObj=res.data
      console.log(depObj);
    }).catch(err=>
      console.error(err)
    )
  },[location])

  const [activeComponent, setActiveComponent] = useState('GraphWrapper');
  const navigate=useNavigate();

  const handlegraphClick = () => {
    setActiveComponent('GraphWrapper');
  };

  const handleTableClick = () => {
    setActiveComponent('GraphTable');
  };
  const handleInvoClick=()=>{
          navigate("/wf/deployment/invocations");
  }
 
const [theme]=useMode();
  return (
    <>
      <ThemeProvider theme={theme}>
        <div className="app">
         
              <ResponsiveAppBar />
        
          <div className="button-container">
          <Button 
            color="primary"
            size="large"
            variant="outlined"
            onClick={handlegraphClick}>Graph View
          </Button>
          <Button
            color="primary"
            size="large"
            variant="outlined"
            onClick={handleTableClick}>Table View
            </Button>
            <Button
            color="primary"
            size="large"
            variant="outlined"
            onClick={handleInvoClick}>Invocations 
            </Button>
        </div>
        {activeComponent === 'GraphWrapper' ? <GraphWrapper /> : <GraphTable />}

        </div>
        
      </ThemeProvider>
   
  </>
  
  );
}

export default InvocationsPage;
